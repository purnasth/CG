
Digital Differential Analyzer Algorithm (DDA)

DDA is a scan conversion line drawing algorithm based on calculation Δy or Δx using Δy = mΔx equation. We sample the line at unit intervals in one coordinate and find corresponding integer nearest the line path for other coordinate.

Algorithm : 

Step 1: Start the program.
Step 2: Declare the variables x1, y1, x2, y2, dx, dy, x, y.
Step 3: Enter the values of x1, y1, x2, y2.
Step 4: Calculate dx = x2 - x1 and dy = y2 - y1.
Step 5: If |dx| > |dy| then steps = |dx| else steps = |dy|.
Step 6: Calculate xinc = dx / steps and yinc = dy / steps.
Step 7: Set x = x1 and y = y1.
Step 8: Plot pixel (x, y).
Step 9: x = x + xinc and y = y + yinc and set pixels (Round(x), Round(y))
Step 10: Repeat step 9 until x = x2 and y = y2.
Step 11: Stop the program.
<newPage/>
Source Code:

#include <stdio.h>
#include <graphics.h>
#include <conio.h>
int main()
{
    int gd = DETECT, gm, i;
    float x, y, dx, dy, steps;
    int x0, x1, y0, y1;
    initgraph(&gd, &gm, "");
    setbkcolor(WHITE);
    printf("Enter initial points x0 and y0: ");
    scanf("%d%d", &x0, &y0);
    printf("Enter final points x1 and y1: ");
    scanf("%d%d", &x1, &y1);
    dx = (float)(x1 - x0);
    dy = (float)(y1 - y0);
    if (dx >= dy) {
        steps = dx;
    } else {
        steps = dy;
    }
    dx = dx / steps;
    dy = dy / steps;
    x = x0;
    y = y0;
    i = 1;
    while (i <= steps) {
        putpixel(x, y, WHITE);
        x += dx;
        y += dy;
        i = i + 1;
    }
    getch();
    closegraph();
    return 0;
}
<newPage/>

Conclusion:

Hence, we were able to generate a line using DDA algorithm.

Output:

Purna Shrestha

Enter initial points x0 and y0: 100 100
Enter final points x1 and y1: 200 200
<newPage/>

Breseham's Line Drawing Algorithm

Theory:

Bresenham's line algorithm is an algorithm that determines the points of an n-dimensional raster that should be selected in order to form a close approximation to a straight line between two points. It requires less time, less memory and less processing power.

Algorithm:

Step 1: Start the program.
Step 2: Read two points P(x1, y1) and P(x2, y2).
Step 3: Calculate dx = x2 - x1 and dy = y2 - y1.
Step 4: Calculate Decision Parameter(P) 
            P = 2dy - dx.
Step 5: Set initial points x = x1 and y = y1 and i = 0.
Step 6: Plot pixel (x, y).
Step 7: If P < 0 then 
            P = P + 2dy and x = x + 1.
Step 8: Else
            P = P + 2dy - 2dx 
            x = x + 1 and y = y + 1.
Step 9: Repeat step 6 to 8 until x = x2 and y = y2.
Step 10: Stop the program.
<newPage/>
Source Code:

#include <stdio.h>
#include <conio.h>
#include <graphics.h>

int main()
{
    int x, y, x1, y1, x2, y2, p, dx, dy;
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");
    printf("\nEnter the x-coordinate & y-coordinate of the first point: ");
    scanf("%d%d", &x1, &y1);
    printf("\nEnter the x-coordinate & y-coordinate of the second point: ");
    scanf("%d%d", &x2, &y2);
    x = x1;
    y = y1;
    dx = x2 - x1;
    dy = y2 - y1;
    putpixel(x, y, RED);
    p = (2 * dy - dx);
    while (x <= x2)
    {
        if (p < 0) {
            x = x + 1;
            p = p + 2 * dy;
        } else {
            x = x + 1;
            y = y + 1;
            p = p + (2 * dy) - (2 * dx);
        }
        putpixel(x, y, 7);
    }
    getch();
    closegraph();
    return 0;
}
<newPage/>

Conclusion:

Hence, we were able to generate a line using Bresenham's line drawing algorithm.

Output:

Purna Shrestha

Enter the x-coordinate & y-coordinate of the first point: 100 100
Enter the x-coordinate & y-coordinate of the second point: 200 200
<newPage/>

Midpoint Circle Drawing Algorithm

Theory:

Midpoint circle algorithm is an algorithm used to determine the points needed for drawing a circle. It is commonly used in both computer graphics and graphics hardware to draw circles. It is a variant of Bresenham's line algorithm.

Algorithm:

Step 1: Start the program.
Step 2: Input the radius of the circle 'r' & center of a circle (xc, yc).
Step 3: Set the value of x = 0 and y = r such that (x0, y0) = (0, r).
Step 4: Calculate the decision parameter P = 1 - r.
Step 5: At xk position, calculate 
            if P < 0 then 
                P(k+1) = P(k) + 2x(k+1) + 1 
                y(k+1) = yk 
                xk = x(k+1).
            else
                P(k+1) = P(k) + 2x(k+1) + 1 - 2y(k+1) 
                y(k+1) = y(k) - 1 
                x(k+1) = xk.
Step 6: Determine the symmetry points in other octants.
Step 7: Move each calculated pixel position(x, y) to the center (xc, yc) and plot the calculated co-ordinate values x = x + xc and y = y + yc.
Step 8: Repeat step 5 to 7 until x >= y.
Step 9: Stop the program.
<newPage/>

Source Code:

#include <stdio.h>
#include <graphics.h>

void circleMidpoint(int, int, int);
void drawCircle(int, int, int, int);

int main()
{
    int xc, yc, r;

    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");
    printf("Enter center coordinates of circle: ");
    scanf("%d %d", &xc, &yc);
    printf("Enter radius of circle: ");
    scanf("%d", &r);
    circleMidpoint(xc, yc, r);
    getch();
    return 0;
}

void circleMidpoint(int xc, int yc, int r)
{
    int x = 0, y = r;
    int p = 1 - r;

    while (x < y)
    {
        drawCircle(xc, yc, x, y);
        x++;

        if (p < 0)
            p = p + 2 * x + 1;
        else
        {
            y--;
            p = p + 2 * (x - y) + 1;
        }

        drawCircle(xc, yc, x, y);
        delay(50);
    }
}

void drawCircle(int xc, int yc, int x, int y)
{
    putpixel(xc + x, yc + y, WHITE);
    putpixel(xc - x, yc + y, WHITE);
    putpixel(xc + x, yc - y, WHITE);
    putpixel(xc - x, yc - y, WHITE);
    putpixel(xc + y, yc + x, WHITE);
    putpixel(xc - y, yc + x, WHITE);
    putpixel(xc + y, yc - x, WHITE);
    putpixel(xc - y, yc - x, WHITE);
}

Conclusion:

Hence, we were able to generate a circle using Midpoint circle drawing algorithm.

Output:

Purna Shrestha

Enter center coordinates of circle: 200 200
Enter radius of circle: 100
<newPage/>

Implementation of 2D transformation:

Theory:

2D transformation is a process of modifying and repositioning the 2D object. It is used to manipulate the size, shape, and orientation of objects. It is also used to change the coordinate position of an object.

Types of 2D transformation:

- Translation
- Rotation
- Scaling
- Reflection

Algorithm:

Step 1: Start the program.
Step 2: Input point P(xi, yi) the original coordinates.
Step 3: Input the translation distance dx and dy.
Step 4: Calculate the translated coordinates as 
            x = xi + dx 
            y = yi + dy.
Step 5: Plot the translated point P'(xi', yi').
Step 6: Stop the program.

Source Code:

#include <stdio.h>
#include <conio.h>
#include <math.h>
#include <graphics.h>

#define PI acos(-1)
void translate();
void rotate();
void scale();
int main()
{
    int choice;
    while (1)
    {
        printf("Enter your choice:\n");
        printf("1.Translation\n2.Rotation\n3.Scaling\n4.Exit\n");
        scanf("%d", &choice);
        if (choice == 1)
            translate();
        else if (choice == 2)
            rotate();
        else if (choice == 3)
            scale();
        else if (choice == 4)
            break;
        else
            printf("Wrong Choice!! Try again\n");
    }
    return 0;
}
void translate()
{
    int gd = DETECT, gm;
    int x, y, x1, y1, x2, y2, tx, ty;
    printf("****Purna Shrestha****");
    initgraph(&gd, &gm, (char *)"");
    printf("\nEnter first coordinate of the triangle: ");
    scanf("%d %d", &x, &y);
    printf("\nEnter second coordinate of the triangle: ");
    scanf("%d %d", &x1, &y1);
    printf("\nEnter third coordinate of the triangle: ");
    scanf("%d %d", &x2, &y2);
    line(x, y, x1, y1);
    line(x1, y1, x2, y2);
    line(x2, y2, x, y);
    printf("\nEnter the translation vector : ");
    scanf("%d %d", &tx, &ty);

    setcolor(YELLOW);
    line(x + tx, y + ty, x1 + tx, y1 + ty);
    line(x1 + tx, y1 + ty, x2 + tx, y2 + ty);
    line(x2 + tx, y2 + ty, x + tx, y + ty);
    outtext("****Purna Shrestha****");
    delay(10);
    getch();
    closegraph();
}
void rotate()
{
    float x1, y1, x2, y2, x3, y3;
    float s, c, angle;
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char *)"");
    printf("****Purna Shrestha****");
    printf("\nEnter first coordinate of the triangle: ");
    scanf("%f %f", &x1, &y1);
    printf("\nEnter second coordinate of the triangle: ");
    scanf("%f %f", &x2, &y2);
    printf("\nEnter third coordinate of the triangle: ");
    scanf("%f %f", &x3, &y3);
    line(x1, y1, x2, y2);
    line(x2, y2, x3, y3);
    line(x3, y3, x1, y1);

    printf("Enter rotation angle: ");
    scanf("%f", &angle);
    setcolor(WHITE);
    c = cos(angle * (PI / 180));
    s = sin(angle * (PI / 180));
    x1 = floor(x1 * c + y1 * s);
    y1 = floor(-x1 * s + y1 * c);
    x2 = floor(x2 * c + y2 * s);
    y2 = floor(-x2 * s + y2 * c);
    x3 = floor(x3 * c + y3 * s);
    y3 = floor(-x3 * s + y3 * c);

    setcolor(YELLOW);
    line(x1, y1, x2, y2);
    line(x2, y2, x3, y3);
    line(x3, y3, x1, y1);
    outtext("****Purna Shrestha****");
    getch();
    closegraph();
}
void scale()
{
    int x, y, x1, y1, x2, y2;
    float scalfx, scalfy;
    int gd = DETECT, gm;
    initgraph(&gd, &gm, (char *)"");
    printf("****Purna Shrestha****");
    printf("\nEnter first coordinate of Triangle = ");
    scanf("%d %d", &x, &y);
    printf("\nEnter second coordinate of Triangle = ");
    scanf("%d %d", &x1, &y1);
    printf("\nEnter third coordinate of Triangle = ");
    scanf("%d %d", &x2, &y2);
    line(x, y, x1, y1);
    line(x1, y1, x2, y2);
    line(x2, y2, x, y);
    printf("Enter Scaling factor scalx and scaly : ");
    scanf("%f %f", &scalfx, &scalfy);
    x = x * scalfx;
    x1 = x1 * scalfx;
    x2 = x2 * scalfx;
    y = y * scalfy;
    y1 = y1 * scalfy;
    y2 = y2 * scalfy;
    setcolor(YELLOW);
    line(x, y, x1, y1);
    line(x1, y1, x2, y2);
    line(x2, y2, x, y);
    outtext("****Purna Shrestha****");
    getch();
    closegraph();
}

Conclusion:

Hence, we were able to implement 2D transformation.

Output:

Enter your choice:
1.Translation
2.Rotation
3.Scaling
4.Exit
1
****Purna Shrestha****
Enter first coordinate of the triangle: 100 100
Enter second coordinate of the triangle: 200 200
Enter third coordinate of the triangle: 300 300
Enter the translation vector : 100 100
<newPage/>

Implementation of Cohen Sutherland Line Clipping Algorithm:

Theory:

Cohen Sutherland Line Clipping Algorithm is used to clip a line using a rectangular window. It is used to clip a line against a rectangular area. It is a line clipping algorithm that is used to find whether a line segment is inside or outside of the window and accordingly it is clipped.

Algorithm:

Step 1: Start the program.
Step 2: Calculate positions of both endpoints of the line.
Step 3: Perform AND operation on both of these end points.
Step 4: If the result is 0000 then the line is completely inside the window.
Step 5: If the result is != 0000 
            then the line is partially inside the window, 
        Else the line is considered the clipped case.
Step 7: If line is clipped case then 
            Calculate the intersection point with boundary ends one by one.
            Divide the line in 2 parts from the intersection point.
            Recursively call the function for both parts.
Step 8: Stop the program.

Source Code:

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <math.h>
#include <graphics.h>

typedef struct coord
{
    int x, y;
    char code[4];
} PT;

void drawWindow();
void drawLine(PT p1, PT p2);
PT setCode(PT p);
int visibility(PT p1, PT p2);
PT resetEndPt(PT p1, PT p2);

int main()
{
    int gd = DETECT, v, gm;
    PT p1, p2, p3, p4, ptemp;
    printf("****Purna Shrestha****\n");
    printf("Enter x1 and y1: ");
    scanf("%d %d", &p1.x, &p1.y);
    printf("Enter x2 and y2: ");
    scanf("%d %d", &p2.x, &p2.y);

    initgraph(&gd, &gm, "");
    outtext(" ****Purna Shrestha****");
    drawWindow();
    delay(500);

    drawLine(p1, p2);
    getch();
    cleardevice();

    delay(500);
    p1 = setCode(p1);
    p2 = setCode(p2);
    v = visibility(p1, p2);
    delay(500);

    switch (v)
    {
    case 0:
        drawWindow();
        delay(500);
        drawLine(p1, p2);
        break;
    case 1:
        drawWindow();
        delay(500);
        break;
    case 2:
        p3 = resetEndPt(p1, p2);
        p4 = resetEndPt(p2, p1);
        drawWindow();
        delay(500);
        drawLine(p3, p4);
        break;
    }

    delay(5000);
    getch();
    closegraph();
    return 0;
}

void drawWindow()
{
    line(150, 100, 450, 100);
    line(450, 100, 450, 350);
    line(450, 350, 150, 350);
    line(150, 350, 150, 100);
}

void drawLine(PT p1, PT p2)
{
    line(p1.x, p1.y, p2.x, p2.y);
}

PT setCode(PT p)
{
    PT ptemp;
    ptemp.code[1] = p.y > 350 ? '1' : '0';
    ptemp.code[2] = p.x > 450 ? '1' : '0';
    ptemp.code[3] = p.x < 150 ? '1' : '0';
    ptemp.x = p.x;
    ptemp.y = p.y;
    return (ptemp);
}

int visibility(PT p1, PT p2)
{
    int i, flag = 0;
    for (i = 0; i < 4; i++)
    {
        if ((p1.code[i] != '0') || (p2.code[i] != '0'))
            flag = 1;
    }
    if (flag == 0)
        return (0);
    for (i = 0; i < 4; i++)
    {
        if ((p1.code[i] == p2.code[i]) && (p1.code[i] == '1'))
            flag = 0;
    }
    if (flag == 0)
        return (1);
    return (2);
}

PT resetEndPt(PT p1, PT p2)
{
    PT temp;
    int x, y, i;
    float m, k;

    if (p1.code[3] == '1')
        x = 150;

    if (p1.code[2] == '1')
        x = 450;

    if ((p1.code[3] == '1') || (p1.code[2] == '1'))
    {
        m = (float)(p2.y - p1.y) / (p2.x - p1.x);
        k = (p1.y + (m * (x - p1.x)));
        temp.y = k;
        temp.x = x;

        for (i = 0; i < 4; i++)
            temp.code[i] = p1.code[i];

        if (temp.y <= 350 && temp.y >= 100)
            return (temp);
    }

    if (p1.code[0] == '1')
        y = 100;

    if (p1.code[1] == '1')
        y = 350;

    if ((p1.code[0] == '1') || (p1.code[1] == '1'))
    {
        m = (float)(p2.y - p1.y) / (p2.x - p1.x);
        k = (float)p1.x + (float)(y - p1.y) / m;
        temp.x = k;
        temp.y = y;

        for (i = 0; i < 4; i++)
            temp.code[i] = p1.code[i];

        return (temp);
    }
    else
        return (p1);
}

Conclusion:

Hence, we were able to implement Cohen Sutherland Line Clipping Algorithm.

Output:

****Purna Shrestha****
Enter x1 and y1: 400 200
Enter x2 and y2: 100 200
<newPage/>

Implementation of Liang Barsky Line Clipping Algorithm:

Theory:

Liang Barsky Line Clipping Algorithm is used to clip a line using a rectangular window. It is used to clip a line against a rectangular area. It is a line clipping algorithm that is used to find whether a line segment is inside or outside of the window and accordingly it is clipped.

Algorithm:

Step 1: Start the program.
Step 2: Input P1(x1, y1) and P2(x2, y2) as the endpoints of the line.
Step 3: Input the coordinates of the rectangular window as (xmin, ymin) and (xmax, ymax).
Step 4: Determine pi & qi as : 
            p1 = - Δx           q1 = x1 - xmin
            p2 = Δx             q2 = xmax - x1
            p3 = - Δy           q3 = y1 - ymin
            p4 = Δy             q4 = ymax - y1
Step 5: If (pi = 0) && (qi < 0) then 
            print("Line is parallel to window boundary & outside, so discard.");
Step 6: Set t1 = 0 and t2 = 1.
Step 7: Calculate ri = qi / pi. (i=1; i<=4; i++)
Step 8: If pi < 0 then 
            t1 = max(t1, ri)
        Else if pi > 0 then 
            t2 = min(t2, ri)
Step 9: Stop the program.

Source Code:

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <math.h>
#include <graphics.h>

int main()
{

	int gd = DETECT, gm;
	int x1, y1, x2, y2;
	int wxmin, wymin, wxmax, wymax;
	float u1 = 0.0, u2 = 1.0;
	int p1, q1, p2, q2, p3, q3, p4, q4;
	float r1, r2, r3, r4;
	int x11, y11, x22, y22;
	printf("\nEnter the window's left xmin and top boundary ymin: ");
	scanf("%d%d", &wxmin, &wymin);
	printf("\nEnter the window's right xmax and bottom boundary ymax: ");
	scanf("%d%d", &wxmax, &wymax);
	printf("Enter line x1 and y1 coordinates:");
	scanf("%d%d", &x1, &y1);
	printf("Enter line x2 and y2 coordinates:");
	scanf("%d%d", &x2, &y2);
	printf("\nLiang-Barsky algorihm expresses these four inequalities using !pk <= qpk \n");
	p1 = -(x2 - x1);
	q1 = x1 - wxmin;
	p2 = (x2 - x1);
	q2 = wxmax - x1;
	p3 = -(y2 - y1);
	q3 = y1 - wymin;
	p4 = (y2 - y1);
	q4 = wymax - y1;
	printf("pl=0 line is parallel to left clipping \n");
	printf("p2=0 line is parallel to right clipping \n");
	printf("p3=0 line is parallel to bottom clipping \n");
	printf("p4=0 line is parallel to top clipping \n");
	if ((p1 == 0.0 && q1 < 0.0) || (p2 == 0.0 && q2 < 0.0) || (p3 == 0.0 && q3 < 0.0) || (p4 == 0.0 && q4 < 0.0))
	{
		printf("Line is rejected \n");
		detectgraph(&gd, &gm);
		initgraph(&gd, &gm, " ");
		setcolor(WHITE);
		rectangle(wxmin, wymax, wxmax, wymin);
		setcolor(WHITE);
		line(x1, y1, x2, y2);
	}
	else
	{
		if (p1 != 0.0)
		{
			r1 = (float)q1 / p1;
			r3 = (float)q3 / p3;
			if (p1 < 0)
				u1 = fmax(r1, u1);
			else
				u2 = fmin(r1, u2);
		}
		if (p2 != 0.0)
		{
			r2 = (float)q2 / p2;
			if (p2 < 0)
				u1 = fmax(r2, u1);
			else
				u2 = fmin(r2, u2);
		}
		if (p3 != 0.0)
		{
			r3 = (float)q3 / p3;
			if (p3 < 0)
				u1 = fmax(r3, u1);
			else
				u2 = fmin(r3, u2);
		}
		if (p4 != 0.0)
		{
			r4 = (float)q4 / p4;
			if (p4 < 0)
			{
				u1 = fmax(r4, u1);
			}
			else
				u2 = fmin(r4, u2);
		}
		if (u1 > u2)
			printf("Line rejected\n");
		else
		{
			x11 = x1 + u1 * (x2 - x1);
			y11 = y1 + u1 * (y2 - y1);
			x22 = x1 + u2 * (x2 - x1);
			y22 = y1 + u2 * (y2 - y1);
			printf("Original line coordinates\n");
			printf("x1=%d,y1=%d,x2=%d,y2=%d\n", x1, y1, x2, y2);
			printf("Window Coordinates are:\n");
			printf("wxmin=%d,wymin=%d,wxmax=%d,wymax=%d\n", wxmin, wymin, wxmax, wymax);
			printf("New Coordinates are:\n");
			printf("x1=%d,y1=%d,x2=%d,y2=%d", x11, y11, x22, y22);
			detectgraph(&gd, &gm);
			initgraph(&gd, &gm, " ");
			setcolor(WHITE);
			line(x1, y1, x2, y2);
			setcolor(WHITE);
			line(wxmin, wymin, wxmin, wymax);
			setcolor(WHITE);
			line(wxmax, wymin, wxmax, wymax);
			setcolor(WHITE);
			line(wxmin, wymax, wxmax, wymax);
			setcolor(WHITE);
			line(wxmin, wymin, wxmax, wymin);
			getch();
			cleardevice();
			setcolor(WHITE);
			line(x11, y11, x22, y22);
			setcolor(WHITE);
			line(wxmin, wymin, wxmin, wymax);
			setcolor(WHITE);
			line(wxmax, wymin, wxmax, wymax);
			setcolor(WHITE);
			line(wxmin, wymax, wxmax, wymax);
			setcolor(WHITE);
			line(wxmin, wymin, wxmax, wymin);
			getch();
		}
	}
	return 0;
}

Conclusion:

Hence, we were able to implement Liang Barsky Line Clipping Algorithm.

Output:

Enter the window's left xmin and top boundary ymin: 100 100
Enter the window's right xmax and bottom boundary ymax: 400 400

Enter line x1 and y1 coordinates: 200 200
Enter line x2 and y2 coordinates: 300 300

Liang-Barsky algorihm expresses these four inequalities using !pk <= qpk

pl=0 line is parallel to left clipping
p2=0 line is parallel to right clipping
p3=0 line is parallel to bottom clipping
p4=0 line is parallel to top clipping

Original line coordinates
x1 = 200, y1 = 200, x2 = 300, y2 = 300

Window Coordinates are:
wxmin = 100, wymin = 100, wxmax = 400, wymax = 400
New Coordinates are:
x1=200, y1=200, x2=300, y2=300
<newPage/>

Implementation of 3D transformation:

Theory:

3D transformation is a process of modifying and repositioning the 3D object. It is used to manipulate the size, shape, and orientation of objects. It is also used to change the coordinate position of an object.

Types of 3D transformation:

- Translation
- Rotation
- Scaling

Algorithm:

Step 1: Start the program.
Step 2: Input the coordinates of the 3D object.
Step 3: Input the translation distance dx, dy, dz.
Step 4: Calculate the translated coordinates as 
            x = xi + dx 
            y = yi + dy 
            z = zi + dz.
Step 5: Plot the translated point P'(xi', yi', zi').
Step 6: Stop the program.

Source Code:

#include <graphics.h>
#include <conio.h>
#include <math.h>
int main()
{
    printf("----3D-Transformation----\n");
    printf("----Purna Shrestha----\n");
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");
    int x1, y1, x2, y2, a, t, tx, ty, depth, dep, mx, my, a1, a2, b1, b2;
    float sx, sy;
    int choice;
    printf(" 1-Translation \n 2-Rotation \n 3-Scaling \n");
    printf("Enter your choice:\n");
    scanf("%d", &choice);
    switch (choice)
    {
    case 1:
        printf("----Translation----\n");
        printf("Enter 1st top value:\n ");
        scanf("%d%d", &x1, &y1);
        printf("Enter right buttom value:\n ");
        scanf("%d%d", &x2, &y2);
        printf("Enter the translation distance (tx,ty):\n ");
        scanf("%d%d", &tx, &ty);
        depth = (x2 - x1) / 4;
        mx = (x1 + x2) / 2;
        my = (y1 + y2) / 2;
        setcolor(7);
        bar3d(x1, y1, x2, y2, depth, 1);
        outtextxy(x2 + 2, y2 + 2, "Original bar");
        a1 = x1 + tx;
        a2 = x2 + tx;
        b1 = y1 + ty;
        b2 = y2 + ty;
        dep = (a2 - a1) / 4;
        setcolor(7);
        bar3d(a1, b1, a2, b2, dep, 1);
        outtextxy(a1 + 2, b2 + 2, "Bar after Translation");
        break;

    case 2:
        printf("----Rotation----\n");
        printf("Enter 1st top value:\n ");
        scanf("%d%d", &x1, &y1);
        printf("Enter right buttom value:\n ");
        scanf("%d%d", &x2, &y2);
        printf("Enter angle of rotation: ");
        scanf("%d", &a);
        depth = (x2 - x1) / 4;
        mx = (x1 + x2) / 2;
        my = (y1 + y2) / 2;
        setcolor(7);
        bar3d(x1, y1, x2, y2, depth, 1);
        outtextxy(x2 + 2, y2 + 2, "Original bar");
        t = a * (3.14 / 180);
        a1 = mx + (x1 - mx) * cos(t) - (y1 - my) * sin(t);
        a2 = mx + (x2 - mx) * cos(t) - (y2 - my) * sin(t);
        b1 = my + (x1 - mx) * sin(t) - (y1 - my) * cos(t);
        b2 = my + (x2 - mx) * sin(t) - (y2 - my) * cos(t);
        if (a2 > a1)
            dep = (a2 - a1) / 4;
        else
            dep = (a1 - a2) / 4;
        setcolor(7);
        bar3d(a1, b1, a2, b2, dep, 1);
        outtextxy(a1 + 2, b2 + 2, "Bar after Rotation");
        break;

    case 3:
        printf("----Scaling----\n");
        printf("Enter 1st top value:\n ");
        scanf("%d%d", &x1, &y1);
        printf("Enter right buttom value:\n ");
        scanf("%d%d", &x2, &y2);
        printf("Enter scaling factor for scaling: ");
        scanf("%f%f", &sx, &sy);
        depth = (x2 - x1) / 4;
        mx = (x1 + x2) / 2;
        my = (y1 + y2) / 2;
        setcolor(7);
        bar3d(x1, y1, x2, y2, depth, 1);
        outtextxy(x2 + 2, y2 + 2, "Original bar");
        a1 = mx + (x1 - mx) * sx;
        a2 = mx + (x2 - mx) * sx;
        b1 = my + (y1 - my) * sy;
        b2 = my + (y2 - my) * sy;
        dep = (a2 - a1) / 4;
        setcolor(7);
        bar3d(a1, b1, a2, b2, dep, 1);
        outtextxy(a1 + 2, b2 + 2, "Bar after Scaling");
        break;
    }
    getch();
}

Conclusion:

Hence, we were able to implement 3D transformation.

Output:

----3D-Transformation----
----Purna Shrestha----
 1-Translation
 2-Rotation
 3-Scaling
Enter your choice:  1
----Translation----
Enter 1st top value:    100 100
Enter right buttom value:   200 200
Enter the translation distance (tx,ty): 50 50
<newPage/>

